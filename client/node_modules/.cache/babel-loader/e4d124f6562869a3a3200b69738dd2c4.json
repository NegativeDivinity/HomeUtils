{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Skele\\\\Documents\\\\GitHub\\\\HomeUtils\\\\client\\\\src\\\\components\\\\ItemRow.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { FaTrash } from 'react-icons/fa';\nimport { GiCheckMark } from 'react-icons/gi';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { detailsItem } from '../actions/todoActions';\nimport TodoItemCard from './todoItemCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PageWrapper = styled.div`\n    display: flex;\n    margin-bottom: 2%;\n`;\n_c = PageWrapper;\nconst Done = styled.button`\n    margin-left: 20px;\n    border: solid black 2px;\n    border-radius: 10px;\n    background-color: green;\n    cursor: pointer;\n    outline: none;\n`;\n_c2 = Done;\nconst Delete = styled.button`\n    margin-left: 20px;\n    border: solid black 2px;\n    border-radius: 10px;\n    background-color: red;\n    cursor: pointer;\n    outline: none;\n`;\n_c3 = Delete;\nexport default function ItemRow(props) {\n  _s();\n\n  const {\n    item\n  } = props;\n  const {\n    time\n  } = props;\n  const itemAdd = useSelector(state => state.itemAdd);\n  const {\n    loading: loadingItem,\n    error: errorItem,\n    success: successCreate,\n    item: createdItem\n  } = itemAdd;\n  const itemDelete = useSelector(state => state.itemDelete);\n  const {\n    loading: loadingDelete,\n    error: errorDelete,\n    success: successDelete\n  } = itemDelete;\n  const itemTimeUpdate = useSelector(state => state.itemTimeUpdate);\n  const {\n    loading: loadingTime,\n    error: errorTime,\n    success: successTime\n  } = itemTimeUpdate;\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const currentDay = new Date().getDate();\n  useEffect(() => {\n    if (successCreate) {\n      dispatch({\n        type: TODO_ADD_RESET\n      });\n      navigate(`/grouptodo/${createdItem._id}/edit`);\n    }\n\n    if (successDelete) {\n      dispatch({\n        type: TODO_DELETE_RESET\n      });\n    }\n\n    if (successTime) {\n      dispatch({\n        type: TODO_UPDATE_TIME_RESET\n      });\n      dispatch(listTodo());\n    }\n\n    dispatch(detailsItem({\n      _id: item._id,\n      time\n    }));\n  }, [dispatch, navigate, successCreate, successDelete, createdItem, successTime]);\n  return /*#__PURE__*/_jsxDEV(PageWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(TodoItemCard, {\n      item: item,\n      time: item.itemTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Done, {\n      onClick: () => updateTimeHandler(item),\n      children: /*#__PURE__*/_jsxDEV(GiCheckMark, {\n        fontSize: \"30px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 61\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Delete, {\n      onClick: () => deleteHandler(item),\n      children: /*#__PURE__*/_jsxDEV(FaTrash, {\n        fontSize: \"30px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 59\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ItemRow, \"mmLR+dwmBO29tZ8S2qj9U/Ej00M=\", true, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c4 = ItemRow;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"PageWrapper\");\n$RefreshReg$(_c2, \"Done\");\n$RefreshReg$(_c3, \"Delete\");\n$RefreshReg$(_c4, \"ItemRow\");","map":{"version":3,"sources":["C:/Users/Skele/Documents/GitHub/HomeUtils/client/src/components/ItemRow.js"],"names":["React","FaTrash","GiCheckMark","useDispatch","useSelector","styled","detailsItem","TodoItemCard","PageWrapper","div","Done","button","Delete","ItemRow","props","item","time","itemAdd","state","loading","loadingItem","error","errorItem","success","successCreate","createdItem","itemDelete","loadingDelete","errorDelete","successDelete","itemTimeUpdate","loadingTime","errorTime","successTime","dispatch","navigate","useNavigate","currentDay","Date","getDate","useEffect","type","TODO_ADD_RESET","_id","TODO_DELETE_RESET","TODO_UPDATE_TIME_RESET","listTodo","itemTime","updateTimeHandler","deleteHandler"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FaTrash } from 'react-icons/fa';\r\nimport { GiCheckMark } from 'react-icons/gi';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { detailsItem } from '../actions/todoActions';\r\nimport TodoItemCard from './todoItemCard';\r\n\r\nconst PageWrapper = styled.div`\r\n    display: flex;\r\n    margin-bottom: 2%;\r\n`;\r\n\r\nconst Done = styled.button`\r\n    margin-left: 20px;\r\n    border: solid black 2px;\r\n    border-radius: 10px;\r\n    background-color: green;\r\n    cursor: pointer;\r\n    outline: none;\r\n`;\r\n\r\nconst Delete = styled.button`\r\n    margin-left: 20px;\r\n    border: solid black 2px;\r\n    border-radius: 10px;\r\n    background-color: red;\r\n    cursor: pointer;\r\n    outline: none;\r\n`;\r\n\r\nexport default function ItemRow(props) {\r\n\r\n    const {item} = props;\r\n    const {time} = props;\r\n\r\n    const itemAdd = useSelector(state => state.itemAdd);\r\n    const {loading: loadingItem, error: errorItem, success: successCreate, item: createdItem} = itemAdd;\r\n\r\n    const itemDelete = useSelector(state => state.itemDelete);\r\n    const {loading: loadingDelete, error: errorDelete, success: successDelete} = itemDelete;\r\n\r\n    const itemTimeUpdate = useSelector(state => state.itemTimeUpdate);\r\n    const {loading: loadingTime, error: errorTime, success: successTime} = itemTimeUpdate;\r\n\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const currentDay = new Date().getDate();\r\n\r\n    useEffect(() => {\r\n\r\n        if (successCreate) {\r\n            dispatch({type: TODO_ADD_RESET});\r\n            navigate(`/grouptodo/${createdItem._id}/edit`);\r\n        }\r\n\r\n        if (successDelete) {\r\n            dispatch({type: TODO_DELETE_RESET});\r\n        }\r\n\r\n        if (successTime) {\r\n            dispatch({type: TODO_UPDATE_TIME_RESET});\r\n            dispatch(listTodo());\r\n        }\r\n\r\n        dispatch(detailsItem({_id: item._id, time}))\r\n    }, [dispatch, navigate, successCreate, successDelete, createdItem, successTime])\r\n\r\n\r\n    return (\r\n        <PageWrapper>\r\n            <TodoItemCard item = {item} time = {item.itemTime} />\r\n            <Done onClick = {() => updateTimeHandler(item)}><GiCheckMark fontSize = '30px' /></Done>\r\n            <Delete onClick = {() => deleteHandler(item)}><FaTrash fontSize = '30px' /></Delete>\r\n        </PageWrapper>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}