{"ast":null,"code":"var _jsxFileName = \"C:\\\\HomeUtils\\\\client\\\\src\\\\components\\\\DirectionCards.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { GrUpdate } from \"react-icons/gr\";\nimport { useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { updateDirection } from '../actions/recipeActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DirectionCard = styled.textarea`\n    display: flex;\n    justify-content: space-between;\n    width: 50%;\n    margin-left: 25%;\n    border: solid black 2px;\n    border-radius: 10px;\n    font-size: 20px;\n    color: white;\n    background-color: rgb(73, 73, 77);\n    resize: none;\n    padding: 10px;\n    height: ${props => props.height || '100px'};\n    outline: none;\n`;\n_c = DirectionCard;\nconst Update = styled.button`\n    margin-left: 20px;\n    border: solid black 2px;\n    border-radius: 10px;\n    cursor: pointer;\n    outline: none;\n    background-color: green;\n`;\n_c2 = Update;\nexport default function IngredientCards(props) {\n  _s();\n\n  const [task, setTask] = useState('');\n  const [height, setHeight] = useState('');\n  const {\n    direction\n  } = props;\n  const {\n    recipeId\n  } = props;\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setTask(direction.task);\n    setHeight(`${direction.task.length / 2}px`);\n  }, [direction]);\n\n  const updateHandler = direction => {\n    dispatch(updateDirection(recipeId, {\n      _id: direction._id,\n      task\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DirectionCard, {\n      id: direction._id,\n      autoFocus: true,\n      height: height,\n      value: task,\n      onChange: e => setTask(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Update, {\n      onClick: () => updateHandler(direction),\n      children: /*#__PURE__*/_jsxDEV(GrUpdate, {\n        fontSize: \"30px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 64\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(IngredientCards, \"ReNTenSrX8RP3/C6LtQpAbuw41g=\", false, function () {\n  return [useDispatch];\n});\n\n_c3 = IngredientCards;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DirectionCard\");\n$RefreshReg$(_c2, \"Update\");\n$RefreshReg$(_c3, \"IngredientCards\");","map":{"version":3,"sources":["C:/HomeUtils/client/src/components/DirectionCards.js"],"names":["React","useEffect","useState","GrUpdate","useDispatch","styled","updateDirection","DirectionCard","textarea","props","height","Update","button","IngredientCards","task","setTask","setHeight","direction","recipeId","dispatch","length","updateHandler","_id","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,eAAR,QAA8B,0BAA9B;;;AAEA,MAAMC,aAAa,GAAGF,MAAM,CAACG,QAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAcC,KAAK,IAAIA,KAAK,CAACC,MAAN,IAAgB,OAAQ;AAC/C;AACA,CAdA;KAAMH,a;AAgBN,MAAMI,MAAM,GAAGN,MAAM,CAACO,MAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;MAAMD,M;AASN,eAAe,SAASE,eAAT,CAAyBJ,KAAzB,EAAgC;AAAA;;AAE3C,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,MAAD,EAASM,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAM;AAACe,IAAAA;AAAD,MAAcR,KAApB;AACA,QAAM;AAACS,IAAAA;AAAD,MAAaT,KAAnB;AAEA,QAAMU,QAAQ,GAAGf,WAAW,EAA5B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,OAAO,CAACE,SAAS,CAACH,IAAX,CAAP;AACAE,IAAAA,SAAS,CAAE,GAAEC,SAAS,CAACH,IAAV,CAAeM,MAAf,GAAwB,CAAE,IAA9B,CAAT;AACH,GAHQ,EAGN,CAACH,SAAD,CAHM,CAAT;;AAKA,QAAMI,aAAa,GAAIJ,SAAD,IAAe;AACjCE,IAAAA,QAAQ,CAACb,eAAe,CAACY,QAAD,EAAW;AAC/BI,MAAAA,GAAG,EAAEL,SAAS,CAACK,GADgB;AAE/BR,MAAAA;AAF+B,KAAX,CAAhB,CAAR;AAIH,GALD;;AAOA,sBACI;AAAA,4BACI,QAAC,aAAD;AACI,MAAA,EAAE,EAAIG,SAAS,CAACK,GADpB;AAEI,MAAA,SAAS,MAFb;AAGI,MAAA,MAAM,EAAIZ,MAHd;AAII,MAAA,KAAK,EAAII,IAJb;AAKI,MAAA,QAAQ,EAAKS,CAAD,IAAOR,OAAO,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV;AAL9B;AAAA;AAAA;AAAA;AAAA,YADJ,eAQI,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAI,MAAMJ,aAAa,CAACJ,SAAD,CAAtC;AAAA,6BAAmD,QAAC,QAAD;AAAU,QAAA,QAAQ,EAAG;AAArB;AAAA;AAAA;AAAA;AAAA;AAAnD;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA,kBADJ;AAYH;;GAlCuBJ,e;UAQHT,W;;;MARGS,e","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { GrUpdate } from \"react-icons/gr\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport {updateDirection} from '../actions/recipeActions';\r\n\r\nconst DirectionCard = styled.textarea`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 50%;\r\n    margin-left: 25%;\r\n    border: solid black 2px;\r\n    border-radius: 10px;\r\n    font-size: 20px;\r\n    color: white;\r\n    background-color: rgb(73, 73, 77);\r\n    resize: none;\r\n    padding: 10px;\r\n    height: ${props => props.height || '100px'};\r\n    outline: none;\r\n`;\r\n\r\nconst Update = styled.button`\r\n    margin-left: 20px;\r\n    border: solid black 2px;\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n    outline: none;\r\n    background-color: green;\r\n`;\r\n\r\nexport default function IngredientCards(props) {\r\n\r\n    const [task, setTask] = useState('');\r\n    const [height, setHeight] = useState('');\r\n\r\n    const {direction} = props;\r\n    const {recipeId} = props;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        setTask(direction.task);\r\n        setHeight(`${direction.task.length / 2}px`);\r\n    }, [direction]);\r\n\r\n    const updateHandler = (direction) => {\r\n        dispatch(updateDirection(recipeId, {\r\n            _id: direction._id,\r\n            task\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <DirectionCard\r\n                id = {direction._id}\r\n                autoFocus\r\n                height = {height}\r\n                value = {task}\r\n                onChange = {(e) => setTask(e.target.value)}>\r\n            </DirectionCard>\r\n            <Update onClick = {() => updateHandler(direction)}><GrUpdate fontSize = '30px' /></Update>\r\n        </>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}