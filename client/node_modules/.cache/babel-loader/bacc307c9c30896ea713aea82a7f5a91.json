{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Skele\\\\Documents\\\\GitHub\\\\HomeUtils\\\\client\\\\src\\\\components\\\\DirectionCards.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { updateDirection } from '../actions/recipeActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function IngredientCards(props) {\n  _s();\n\n  const [task, setTask] = useState('');\n  const [height, setHeight] = useState('');\n  const textarea = useRef(null);\n  const {\n    direction\n  } = props;\n  const {\n    recipeId\n  } = props;\n  const dispatch = useDispatch();\n  const element = document.getElementsByTagName('textarea');\n  const text = element.scrollHeight;\n  useEffect(() => {\n    setTask(direction.task);\n  }, [direction]);\n  const DirectionCard = styled.textarea`\n        display: flex;\n        justify-content: space-between;\n        width: 50%;\n        margin-left: 25%;\n        border: solid black 2px;\n        border-radius: 10px;\n        font-size: 20px;\n        color: white;\n        background-color: rgb(73, 73, 77);\n        resize: none;\n        padding: 10px;\n        height: auto;\n    `;\n\n  const submitHandler = () => {\n    dispatch(updateDirection(recipeId, {\n      _id: direction._id,\n      task\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(DirectionCard, {\n    id: direction._id,\n    value: task,\n    onChange: e => setTask(e.target.value)\n  }, direction._id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(IngredientCards, \"ago2VvvRliirBtssPB65GS1rCxU=\", false, function () {\n  return [useDispatch];\n});\n\n_c = IngredientCards;\n\nvar _c;\n\n$RefreshReg$(_c, \"IngredientCards\");","map":{"version":3,"sources":["C:/Users/Skele/Documents/GitHub/HomeUtils/client/src/components/DirectionCards.js"],"names":["React","useEffect","useState","useRef","useDispatch","styled","updateDirection","IngredientCards","props","task","setTask","height","setHeight","textarea","direction","recipeId","dispatch","element","document","getElementsByTagName","text","scrollHeight","DirectionCard","submitHandler","_id","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,eAAR,QAA8B,0BAA9B;;AAEA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAE3C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMW,QAAQ,GAAGV,MAAM,CAAC,IAAD,CAAvB;AAEA,QAAM;AAACW,IAAAA;AAAD,MAAcN,KAApB;AACA,QAAM;AAACO,IAAAA;AAAD,MAAaP,KAAnB;AACA,QAAMQ,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAMa,OAAO,GAAGC,QAAQ,CAACC,oBAAT,CAA8B,UAA9B,CAAhB;AACA,QAAMC,IAAI,GAAGH,OAAO,CAACI,YAArB;AAEApB,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,OAAO,CAACI,SAAS,CAACL,IAAX,CAAP;AAEH,GAHQ,EAGN,CAACK,SAAD,CAHM,CAAT;AAKA,QAAMQ,aAAa,GAAGjB,MAAM,CAACQ,QAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAbI;;AAeA,QAAMU,aAAa,GAAG,MAAM;AACxBP,IAAAA,QAAQ,CAACV,eAAe,CAACS,QAAD,EAAW;AAC/BS,MAAAA,GAAG,EAAEV,SAAS,CAACU,GADgB;AAE/Bf,MAAAA;AAF+B,KAAX,CAAhB,CAAR;AAIH,GALD;;AAOA,sBACI,QAAC,aAAD;AAEI,IAAA,EAAE,EAAIK,SAAS,CAACU,GAFpB;AAGI,IAAA,KAAK,EAAIf,IAHb;AAII,IAAA,QAAQ,EAAKgB,CAAD,IAAOf,OAAO,CAACe,CAAC,CAACC,MAAF,CAASC,KAAV;AAJ9B,KACWb,SAAS,CAACU,GADrB;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GA/CuBjB,e;UAQHH,W;;;KARGG,e","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport {updateDirection} from '../actions/recipeActions';\r\n\r\nexport default function IngredientCards(props) {\r\n\r\n    const [task, setTask] = useState('');\r\n    const [height, setHeight] = useState('');\r\n    const textarea = useRef(null);\r\n\r\n    const {direction} = props;\r\n    const {recipeId} = props;\r\n    const dispatch = useDispatch();\r\n    const element = document.getElementsByTagName('textarea');\r\n    const text = element.scrollHeight;\r\n\r\n    useEffect(() => {\r\n        setTask(direction.task);\r\n        \r\n    }, [direction]);\r\n\r\n    const DirectionCard = styled.textarea`\r\n        display: flex;\r\n        justify-content: space-between;\r\n        width: 50%;\r\n        margin-left: 25%;\r\n        border: solid black 2px;\r\n        border-radius: 10px;\r\n        font-size: 20px;\r\n        color: white;\r\n        background-color: rgb(73, 73, 77);\r\n        resize: none;\r\n        padding: 10px;\r\n        height: auto;\r\n    `;\r\n\r\n    const submitHandler = () => {\r\n        dispatch(updateDirection(recipeId, {\r\n            _id: direction._id,\r\n            task\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <DirectionCard \r\n            key = {direction._id}\r\n            id = {direction._id}\r\n            value = {task}\r\n            onChange = {(e) => setTask(e.target.value)}\r\n        />\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}