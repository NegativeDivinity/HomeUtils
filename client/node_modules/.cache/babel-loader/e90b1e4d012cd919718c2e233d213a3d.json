{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Skele\\\\Documents\\\\GitHub\\\\HomeUtils\\\\client\\\\src\\\\components\\\\DirectionCards.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { updateDirection } from '../actions/recipeActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DirectionCard = styled.textarea`\n    display: flex;\n    justify-content: space-between;\n    width: 50%;\n    margin-left: 25%;\n    border: solid black 2px;\n    border-radius: 10px;\n    font-size: 20px;\n    color: white;\n    background-color: rgb(73, 73, 77);\n    resize: none;\n    padding: 10px;\n    height: ${props => props.height || '100px'};\n    outline: none;\n`;\n_c = DirectionCard;\nexport default function IngredientCards(props) {\n  _s();\n\n  const [task, setTask] = useState('');\n  const [height, setHeight] = useState('');\n  const {\n    direction\n  } = props;\n  useEffect(() => {\n    setTask(direction.task);\n    setHeight(`${direction.task.length / 2}px`);\n  }, [direction]);\n  return /*#__PURE__*/_jsxDEV(DirectionCard, {\n    id: direction._id,\n    autoFocus: true,\n    height: height,\n    value: task,\n    onChange: e => setTask(e.target.value)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n\n_s(IngredientCards, \"Bwa3SPM/PHnvpCV9XQLVebmjEEM=\");\n\n_c2 = IngredientCards;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DirectionCard\");\n$RefreshReg$(_c2, \"IngredientCards\");","map":{"version":3,"sources":["C:/Users/Skele/Documents/GitHub/HomeUtils/client/src/components/DirectionCards.js"],"names":["React","useEffect","useState","useRef","useDispatch","styled","updateDirection","DirectionCard","textarea","props","height","IngredientCards","task","setTask","setHeight","direction","length","_id","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,eAAR,QAA8B,0BAA9B;;AAEA,MAAMC,aAAa,GAAGF,MAAM,CAACG,QAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAcC,KAAK,IAAIA,KAAK,CAACC,MAAN,IAAgB,OAAQ;AAC/C;AACA,CAdA;KAAMH,a;AAgBN,eAAe,SAASI,eAAT,CAAyBF,KAAzB,EAAgC;AAAA;;AAE3C,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,MAAD,EAASI,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAM;AAACa,IAAAA;AAAD,MAAcN,KAApB;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,OAAO,CAACE,SAAS,CAACH,IAAX,CAAP;AACAE,IAAAA,SAAS,CAAE,GAAEC,SAAS,CAACH,IAAV,CAAeI,MAAf,GAAwB,CAAE,IAA9B,CAAT;AACH,GAHQ,EAGN,CAACD,SAAD,CAHM,CAAT;AAKA,sBACI,QAAC,aAAD;AACI,IAAA,EAAE,EAAIA,SAAS,CAACE,GADpB;AAEI,IAAA,SAAS,MAFb;AAGI,IAAA,MAAM,EAAIP,MAHd;AAII,IAAA,KAAK,EAAIE,IAJb;AAKI,IAAA,QAAQ,EAAKM,CAAD,IAAOL,OAAO,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV;AAL9B;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GArBuBT,e;;MAAAA,e","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport {updateDirection} from '../actions/recipeActions';\r\n\r\nconst DirectionCard = styled.textarea`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 50%;\r\n    margin-left: 25%;\r\n    border: solid black 2px;\r\n    border-radius: 10px;\r\n    font-size: 20px;\r\n    color: white;\r\n    background-color: rgb(73, 73, 77);\r\n    resize: none;\r\n    padding: 10px;\r\n    height: ${props => props.height || '100px'};\r\n    outline: none;\r\n`;\r\n\r\nexport default function IngredientCards(props) {\r\n\r\n    const [task, setTask] = useState('');\r\n    const [height, setHeight] = useState('');\r\n\r\n    const {direction} = props;\r\n\r\n    useEffect(() => {\r\n        setTask(direction.task);\r\n        setHeight(`${direction.task.length / 2}px`);\r\n    }, [direction]);\r\n\r\n    return (\r\n        <DirectionCard\r\n            id = {direction._id}\r\n            autoFocus\r\n            height = {height}\r\n            value = {task}\r\n            onChange = {(e) => setTask(e.target.value)}>\r\n        </DirectionCard>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}