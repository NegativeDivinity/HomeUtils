{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Skele\\\\Documents\\\\GitHub\\\\HomeUtils\\\\client\\\\src\\\\pages\\\\GroceryEdit.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router';\nimport styled from 'styled-components';\nimport { detailsGrocery, updateGrocery } from '../actions/groceryActions';\nimport { detailsUser, updateUser } from '../actions/userActions';\nimport LoadingBox from '../components/LoadingBox';\nimport MessageBox from '../components/MessageBox';\nimport { GROCERY_DETAILS_UPDATE_RESET } from '../constants/groceryConstants';\nimport { USER_DETAILS_UPDATE_RESET } from '../constants/userConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PageWrapper = styled.div`\n    margin-top: 2%;\n    color: white;\n`;\n_c = PageWrapper;\nconst GroceryEditForm = styled.form`\n    splay: flex;\n    flex-direction: column;\n    margin: 0 0 1% 30%;\n    width: 40%;\n    border: solid black 3px;\n    padding: 10px;\n    border-radius: 10px;\n    background-color: rgb(73, 73, 77);\n\n    h1 {\n        text-align: center;\n    }\n\n    div {\n        display: flex;\n        justify-content: space-between;\n        padding: 15px;\n        color: white;\n        font-size: 20px;\n\n        input {\n            padding: 5px;\n            width: 50%;\n            border-radius: 10px;\n            outline: none;\n            border: none;\n        }\n    }\n`;\n_c2 = GroceryEditForm;\nconst Submit = styled.button`\n    width: 80%;\n    margin: 2% 0 0 10%;\n    border-radius: 10px;\n    padding: 10px;\n    cursor: pointer;\n\n    &:hover {\n        opacity: 0.7;\n    }\n`;\n_c3 = Submit;\nexport default function GroceryEdit() {\n  _s();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  const groceryDetails = useSelector(state => state.groceryDetails);\n  const {\n    loading: loadingDetail,\n    error: errorDetail,\n    grocery\n  } = groceryDetails;\n  const groceryUpdate = useSelector(state => state.groceryUpdate);\n  const {\n    success\n  } = groceryUpdate;\n  const [name, setName] = useState('');\n  const [quantity, setQuantity] = useState('');\n  useEffect(() => {\n    if (success) {\n      dispatch({\n        type: GROCERY_DETAILS_UPDATE_RESET\n      });\n      navigate('/grocery');\n    }\n\n    if (!grocery) {\n      dispatch(detailsGrocery(id));\n    } else {\n      setName(grocery.name);\n      setQuantity(grocery.quantity);\n    }\n  }, [dispatch, grocery, id, navigate, success]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n    dispatch(updateGrocery({\n      _id: grocery._id,\n      name,\n      quantity\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(PageWrapper, {\n    children: /*#__PURE__*/_jsxDEV(GroceryEditForm, {\n      onSubmit: submitHandler,\n      children: loadingDetail ? /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 25\n      }, this) : errorDetail ? /*#__PURE__*/_jsxDEV(MessageBox, {\n        variant: \"danger\",\n        children: errorDetail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: grocery.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Name: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"quantity\",\n            children: \"Quantity: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"quantity\",\n            value: quantity,\n            onChange: e => setLastName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"userName\",\n            children: \"Username: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"userName\",\n            value: userName,\n            onChange: e => setUserName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Password: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\",\n            value: password,\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"confirmPassword\",\n            children: \"Confirm Password: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"confirmPassword\",\n            value: confirmPassword,\n            onChange: e => setConfirmPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Submit, {\n          type: \"submit\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 12\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 8\n  }, this);\n}\n\n_s(GroceryEdit, \"Yuq7eN/cnDciQg0V/JS6HDr9hR4=\", false, function () {\n  return [useDispatch, useNavigate, useParams, useSelector, useSelector];\n});\n\n_c4 = GroceryEdit;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"PageWrapper\");\n$RefreshReg$(_c2, \"GroceryEditForm\");\n$RefreshReg$(_c3, \"Submit\");\n$RefreshReg$(_c4, \"GroceryEdit\");","map":{"version":3,"sources":["C:/Users/Skele/Documents/GitHub/HomeUtils/client/src/pages/GroceryEdit.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","useNavigate","useParams","styled","detailsGrocery","updateGrocery","detailsUser","updateUser","LoadingBox","MessageBox","GROCERY_DETAILS_UPDATE_RESET","USER_DETAILS_UPDATE_RESET","PageWrapper","div","GroceryEditForm","form","Submit","button","GroceryEdit","dispatch","navigate","id","groceryDetails","state","loading","loadingDetail","error","errorDetail","grocery","groceryUpdate","success","name","setName","quantity","setQuantity","type","submitHandler","e","preventDefault","_id","target","value","setLastName","userName","setUserName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate, useParams } from 'react-router';\r\nimport styled from 'styled-components';\r\nimport { detailsGrocery, updateGrocery } from '../actions/groceryActions';\r\nimport { detailsUser, updateUser } from '../actions/userActions';\r\nimport LoadingBox from '../components/LoadingBox';\r\nimport MessageBox from '../components/MessageBox';\r\nimport { GROCERY_DETAILS_UPDATE_RESET } from '../constants/groceryConstants';\r\nimport { USER_DETAILS_UPDATE_RESET } from '../constants/userConstants';\r\n\r\nconst PageWrapper = styled.div`\r\n    margin-top: 2%;\r\n    color: white;\r\n`;\r\n\r\nconst GroceryEditForm = styled.form`\r\n    splay: flex;\r\n    flex-direction: column;\r\n    margin: 0 0 1% 30%;\r\n    width: 40%;\r\n    border: solid black 3px;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    background-color: rgb(73, 73, 77);\r\n\r\n    h1 {\r\n        text-align: center;\r\n    }\r\n\r\n    div {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        padding: 15px;\r\n        color: white;\r\n        font-size: 20px;\r\n\r\n        input {\r\n            padding: 5px;\r\n            width: 50%;\r\n            border-radius: 10px;\r\n            outline: none;\r\n            border: none;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Submit = styled.button`\r\n    width: 80%;\r\n    margin: 2% 0 0 10%;\r\n    border-radius: 10px;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        opacity: 0.7;\r\n    }\r\n`;\r\n\r\nexport default function GroceryEdit() {\r\n\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const {id} = useParams();\r\n\r\n    const groceryDetails = useSelector(state => state.groceryDetails);\r\n    const {loading: loadingDetail, error: errorDetail, grocery} = groceryDetails;\r\n\r\n    const groceryUpdate = useSelector(state => state.groceryUpdate);\r\n    const {success} = groceryUpdate;\r\n\r\n    const [name, setName] = useState('');\r\n    const [quantity, setQuantity] = useState('');\r\n\r\n    useEffect(() => {\r\n\r\n        if (success) {\r\n            dispatch({type: GROCERY_DETAILS_UPDATE_RESET});\r\n            navigate('/grocery');\r\n        }\r\n\r\n        if (!grocery) {\r\n            dispatch(detailsGrocery(id));\r\n        } else {\r\n            setName(grocery.name);\r\n            setQuantity(grocery.quantity);\r\n        }\r\n\r\n    }, [dispatch, grocery, id, navigate, success]);\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n            \r\n        dispatch(updateGrocery({_id: \r\n                grocery._id, \r\n                name, \r\n                quantity,\r\n            }));\r\n    }\r\n\r\n    return (\r\n       <PageWrapper>\r\n           <GroceryEditForm onSubmit = {submitHandler}>\r\n                {loadingDetail ? (\r\n                        <LoadingBox />\r\n                    ) : errorDetail ? (\r\n                        <MessageBox variant = 'danger'>{errorDetail}</MessageBox>\r\n                    ) :\r\n                        <>\r\n                            <h1>{grocery.name}</h1>\r\n                            <div>\r\n                                <label htmlFor=\"name\">Name: </label>\r\n                                <input \r\n                                    type=\"text\" \r\n                                    id = 'name'\r\n                                    value = {name} \r\n                                    onChange = {(e) => setName(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label htmlFor=\"quantity\">Quantity: </label>\r\n                                <input \r\n                                    type=\"number\" \r\n                                    id = 'quantity' \r\n                                    value = {quantity} \r\n                                    onChange = {(e) => setLastName(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label htmlFor=\"userName\">Username: </label>\r\n                                <input \r\n                                    type=\"text\" \r\n                                    id = 'userName' \r\n                                    value = {userName} \r\n                                    onChange = {(e) => setUserName(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label htmlFor=\"email\">Email: </label>\r\n                                <input \r\n                                    type=\"email\" \r\n                                    id = 'email' \r\n                                    value = {email} \r\n                                    onChange = {(e) => setEmail(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label htmlFor=\"password\">Password: </label>\r\n                                <input \r\n                                    type=\"password\" \r\n                                    id = 'password' \r\n                                    value={password} \r\n                                    onChange = {(e) => setPassword(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label htmlFor=\"confirmPassword\">Confirm Password: </label>\r\n                                <input \r\n                                    type=\"password\" \r\n                                    id = 'confirmPassword' \r\n                                    value={confirmPassword} \r\n                                    onChange = {(e) => setConfirmPassword(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            <Submit type = 'submit'>Update</Submit>\r\n                        </>\r\n                }\r\n            </GroceryEditForm>\r\n       </PageWrapper>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}